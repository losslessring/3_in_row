{"version":3,"sources":["components/Cell.jsx","engine/calculate_phase/1_group_phase.js","utils/func.js","components/Field.jsx","engine/calculate_phase/2_remove_phase.js","App.js","index.js"],"names":["Cell","props","className","color","onClick","changeColor","index","groupRepeats","compare","prop","cells","reduce","accum","current","push","lastInnerArrayElement","length","pipe","fns","v","fn","flat","array","Field","bind","state","clicksCounter","swapFirst","swapSecond","generateField","x","y","colors","style","display","gridTemplateRows","gridTemplateColumns","justifyItems","border","backgroundColor","gap","console","log","this","setState","tempArray","firstObj","secondObj","callback","newState","a","b","line","row","groupToEmpty","filter","cellGroup","map","cell","unchanged","removeRow","sort","resetClicksCounter","swapColors","rows","cols","field","i","counter","j","getRandomItem","arr","Math","floor","random","component","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.712befa9.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport {getRandomItem} from '../utils/utils'\r\n\r\n\r\nexport default function Cell(props) {\r\n\r\n  \r\n  //const [color, setColor] = useState(() => {return props.color})\r\n\r\n\r\n  return (\r\n    // <div className={color} onClick={() => setColor(prevColor => {\r\n    //   console.log(props.color)\r\n    //   return \"Green\"})}>\r\n    // </div>\r\n    <div className={props.color} onClick={() => { \r\n      props.changeColor(props.index)\r\n      // console.log(props.index)\r\n    }}>\r\n      </div>\r\n  )\r\n}","export const groupRepeats = compare => prop => cells => {\r\n  return cells.reduce((accum, current, index) => {\r\n    if (index === 0) {\r\n      accum.push([current])\r\n      return accum\r\n    }\r\n\r\n    const lastInnerArrayElement = accum[accum.length - 1][accum[accum.length - 1].length - 1][prop]\r\n    \r\n    if (compare(lastInnerArrayElement, current[prop])){\r\n      accum[accum.length - 1].push(current)\r\n    } else {\r\n      accum.push([current])\r\n    }\r\n    return accum\r\n  }, [])\r\n  \r\n}\r\n","\r\nexport const pipe = function(...fns) {\r\n    return function piped(v) {\r\n      for (let fn of fns) {\r\n        v = fn(v)\r\n      }\r\n      return v\r\n    }\r\n  }\r\n  \r\nexport const compose = function(...fns){\r\n    return pipe(...fns.reverse())\r\n  }\r\n  \r\nexport const resolvePath = (object, path, defaultValue) => path\r\n  .split(/[\\.\\[\\]\\'\\\"]/)\r\n  .filter(p => p)\r\n  .reduce((o, p) => o ? o[p] : defaultValue, object)\r\n\r\nexport const forEach = callback => array => {\r\n  return array.forEach(element => {\r\n      callback(element)\r\n    })\r\n  \r\n}\r\n\r\nexport const map = callback => array => {\r\n  return array.map(callback)\r\n}\r\n\r\nexport const flat = array => {\r\n  return array.flat()\r\n}\r\n\r\nexport const sort = callback => array => {\r\n  return array.sort(callback)\r\n}","import React, { Component } from 'react'\r\n\r\nimport Cell from './Cell'\r\n\r\n//import {getRandomItem} from '../utils/utils'\r\nimport {groupRepeats} from '../engine/calculate_phase/1_group_phase'\r\nimport {removeRow} from '../engine/calculate_phase/2_remove_phase'\r\nimport {pipe, forEach, map, flat, sort} from '../utils/func'\r\n\r\n//import * as R from 'ramda'\r\n\r\nexport default class Field extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    \r\n    this.changeColor = this.changeColor.bind(this)\r\n\r\n    this.state = {\r\n      clicksCounter: 0,\r\n      swapFirst: null,\r\n      swapSecond: null,\r\n      cells: this.generateField(this.props.x, this.props.y, this.props.colors),\r\n      style: {\r\n        display: 'grid',\r\n        gridTemplateRows: `repeat(${this.props.x}, 100px)`,\r\n        gridTemplateColumns: `repeat(${this.props.y}, 100px)`,\r\n        justifyItems: 'center',\r\n        border: '5px solid lightGrey',\r\n        color: '#ffffff',\r\n        backgroundColor: 'lightGrey',\r\n        gap: '2px'\r\n      }\r\n    }\r\n    console.log(this.state.cells)\r\n  }\r\n  \r\n  // incrementClicksCounter(index) {\r\n  //   this.setState({clicksCounter: this.state.clicksCounter + 1}, this.resetClicksCounter)\r\n    \r\n  // }\r\n\r\n  resetClicksCounter() {\r\n    //console.log(this.state.clicksCounter)\r\n    if (this.state.clicksCounter > 1) {\r\n      this.setState({clicksCounter: 0})\r\n     }  \r\n  }\r\n\r\n  swapColors(){\r\n    let tempArray = [...this.state.cells]\r\n    let firstObj = {...tempArray[this.state.swapFirst.index], color: this.state.swapSecond.color }\r\n    let secondObj = {...tempArray[this.state.swapSecond.index], color: this.state.swapFirst.color }\r\n    // console.log(firstObj)\r\n    // console.log(secondObj)\r\n    tempArray[this.state.swapFirst.index] = firstObj\r\n    tempArray[this.state.swapSecond.index] = secondObj\r\n        \r\n        \r\n    this.setState({cells : tempArray}, () => {\r\n      const newState = pipe(\r\n      groupRepeats( (a, b) =>  a === b ? true : false)(\"y\"),\r\n      map(line => {\r\n        //console.log(groupRepeats( (a, b) =>  a === b ? true : false)(\"color\")(line))\r\n        //console.log(removeRow(groupRepeats( (a, b) =>  a === b ? true : false)(\"color\")(line)))\r\n        return removeRow(groupRepeats( (a, b) =>  a === b ? true : false)(\"color\")(line))  \r\n      }),\r\n      flat,\r\n      sort((a, b) => a.index - b.index )\r\n      )(this.state.cells)\r\n      //console.log(newState.flat().sort((a, b) => a.index - b.index ))\r\n      this.setState({cells: newState})\r\n    })\r\n  }\r\n\r\n\r\n  changeColor(index) {\r\n    \r\n    this.setState({clicksCounter: this.state.clicksCounter + 1}, () => {\r\n      this.resetClicksCounter()\r\n      if (this.state.clicksCounter === 1){\r\n        this.setState({swapFirst: this.state.cells[index]})\r\n      }\r\n      if (this.state.clicksCounter === 2){\r\n        this.setState({swapSecond: this.state.cells[index]}, this.swapColors)\r\n      }\r\n  \r\n    })\r\n    \r\n\r\n\r\n  }\r\n\r\n  generateField(rows, cols, colors) {\r\n    let field = []\r\n    for (let i = 0, counter = 0; i < rows; i++) {\r\n      for (let j = 0; j < cols; j++) {\r\n        \r\n        field.push({ x: j,\r\n                     y: i,\r\n                     color: this.getRandomItem(colors),\r\n                     index: counter  \r\n                    })\r\n        counter++\r\n      }\r\n    }\r\n    return field\r\n  }\r\n  \r\n  getRandomItem(arr) {\r\n    return arr[Math.floor(Math.random() * arr.length)]\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={this.state.style}>\r\n        {this.state.cells.map((component) => (\r\n          <Cell key={component.index} index={component.index} color={component.color} changeColor={this.changeColor} />\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n \r\n","export const removeRow = row => {\r\n    //console.log(row)\r\n    const groupToEmpty = row.filter(cellGroup => cellGroup.length >= 3)\r\n              .map(cellGroup => cellGroup.map(cell =>({...cell, color: \"Empty\"})))\r\n              \r\n    const unchanged = row.filter(cellGroup => cellGroup.length < 3)\r\n    \r\n    return [...groupToEmpty.flat(), ...unchanged.flat()]\r\n}","import './App.css'\nimport Field from './components/Field'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Field x={5} y={5} colors={[\"Red\", \"Green\", \"Blue\"]}/>\n    </div>\n  );\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}